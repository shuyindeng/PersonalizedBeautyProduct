{"ast":null,"code":"const parseFunction = funcString => {\n  if (!funcString) {\n    return new Set();\n  }\n\n  return new Set(funcString.split('|'));\n};\n\nconst parseRating = ratingStr => {\n  const num = parseFloat(ratingStr);\n  return isNaN(num) ? 0 : num;\n};\n\nexport const getProducts = async () => {\n  const data = await (await fetch(\"https://julie-commerce.s3.us-west-2.amazonaws.com/moisturizer_clean.csv\")).text();\n  const lines = data.split(\"\\n\");\n  return lines.map(product => {\n    const parts = product.split(',');\n    return {\n      name: parts[0],\n      brand: parts[1],\n      price: parseFloat(parts[2]),\n      review: parts[3],\n      rating: parseRating(parts[4]),\n      description: parts[5],\n      function: parseFunction(parts[6]),\n      productImageUrl: parts[7],\n      productUrl: parts[8]\n    };\n  });\n};","map":{"version":3,"sources":["/Users/juliedeng/Commerce/src/products.ts"],"names":["parseFunction","funcString","Set","split","parseRating","ratingStr","num","parseFloat","isNaN","getProducts","data","fetch","text","lines","map","product","parts","name","brand","price","review","rating","description","function","productImageUrl","productUrl"],"mappings":"AAYA,MAAMA,aAAa,GAAIC,UAAD,IAAsC;AACxD,MAAG,CAACA,UAAJ,EAAgB;AACZ,WAAO,IAAIC,GAAJ,EAAP;AACH;;AAED,SAAO,IAAIA,GAAJ,CAAQD,UAAU,CAACE,KAAX,CAAiB,GAAjB,CAAR,CAAP;AACH,CAND;;AAQA,MAAMC,WAAW,GAAIC,SAAD,IAAgC;AAChD,QAAMC,GAAG,GAAGC,UAAU,CAACF,SAAD,CAAtB;AAEA,SAAOG,KAAK,CAACF,GAAD,CAAL,GAAa,CAAb,GAAiBA,GAAxB;AACH,CAJD;;AAMA,OAAO,MAAMG,WAAW,GAAG,YAAiC;AACxD,QAAMC,IAAI,GAAG,MAAM,CAAC,MAAMC,KAAK,CAAC,yEAAD,CAAZ,EAAyFC,IAAzF,EAAnB;AACA,QAAMC,KAAK,GAAGH,IAAI,CAACP,KAAL,CAAW,IAAX,CAAd;AACA,SAAOU,KAAK,CAACC,GAAN,CAAUC,OAAO,IAAI;AACxB,UAAMC,KAAK,GAAGD,OAAO,CAACZ,KAAR,CAAc,GAAd,CAAd;AACA,WAAO;AACHc,MAAAA,IAAI,EAAED,KAAK,CAAC,CAAD,CADR;AAEHE,MAAAA,KAAK,EAAEF,KAAK,CAAC,CAAD,CAFT;AAGHG,MAAAA,KAAK,EAAEZ,UAAU,CAACS,KAAK,CAAC,CAAD,CAAN,CAHd;AAIHI,MAAAA,MAAM,EAAEJ,KAAK,CAAC,CAAD,CAJV;AAKHK,MAAAA,MAAM,EAAEjB,WAAW,CAACY,KAAK,CAAC,CAAD,CAAN,CALhB;AAMHM,MAAAA,WAAW,EAAEN,KAAK,CAAC,CAAD,CANf;AAOHO,MAAAA,QAAQ,EAAEvB,aAAa,CAACgB,KAAK,CAAC,CAAD,CAAN,CAPpB;AAQHQ,MAAAA,eAAe,EAAER,KAAK,CAAC,CAAD,CARnB;AASHS,MAAAA,UAAU,EAAET,KAAK,CAAC,CAAD;AATd,KAAP;AAWH,GAbM,CAAP;AAcH,CAjBM","sourcesContent":["export interface Product {\n    name: string;\n    brand: string;\n    price: number;\n    review: number;\n    rating: number;\n    description: string;\n    function: Set<string>;\n    productImageUrl: string;\n    productUrl: string;\n}\n\nconst parseFunction = (funcString: string) : Set<string> => {\n    if(!funcString) {\n        return new Set();\n    }\n\n    return new Set(funcString.split('|'));\n}\n\nconst parseRating = (ratingStr: string) : number => {\n    const num = parseFloat(ratingStr);\n\n    return isNaN(num) ? 0 : num;\n}\n\nexport const getProducts = async () : Promise<Product[]> => {\n    const data = await (await fetch(\"https://julie-commerce.s3.us-west-2.amazonaws.com/moisturizer_clean.csv\")).text()\n    const lines = data.split(\"\\n\");\n    return lines.map(product => {\n        const parts = product.split(',');\n        return {\n            name: parts[0],\n            brand: parts[1],\n            price: parseFloat(parts[2]),\n            review: parts[3],\n            rating: parseRating(parts[4]),\n            description: parts[5],\n            function: parseFunction(parts[6]),\n            productImageUrl: parts[7],\n            productUrl: parts[8]\n        }\n    });\n}"]},"metadata":{},"sourceType":"module"}